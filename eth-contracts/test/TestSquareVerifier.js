// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require("Verifier");

contract('TestSquareVerifier', async(accounts) => {
    before(async function () { 
        // Create verifer for unit test(s)
        this.verifier = await SquareVerifier.new(accounts);         
    });

    describe('test square verifier', function () {

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps

        it('verifier should work with correct proof', async function () { 

            let testProof = {
                "proof": {
                  "a": [
                    "0x10b65099b47791ac9f93cd433fa21ad0325df1019d3530b05f0a7b562c2c29d6",
                    "0x117f3d64bf62ab670e4fa3cc127aac0587bcaf33dc00a63e7c008f30880f3017"
                  ],
                  "b": [
                    [
                      "0x1c5294c90e939fdd43525f2eca7ee0ac9ca8c1417bf2a5c2a80490159232d6ba",
                      "0x0a65d8655a68ad78332cc5b07e5a4e6ea2cbe1aea8aed9099b22dd40a8f49f0b"
                    ],
                    [
                      "0x20e878170a0b49e0c0f6c6912c0a9f989da01d4ae8e64f30fccb0cae2992e281",
                      "0x0d20334797ac198bd58e73a4d65a5cb75483a654b93b431f79a25ea322b0bc3b"
                    ]
                  ],
                  "c": [
                    "0x2990c79cbc3fc4b49bd8df40de2c53c4ed7e31f6d1ffa52dffaffc53f3b7c71f",
                    "0x2e2eacdff8afd6d48d6a39c9772be1bb6501762b872ecebc7d39a4fcbde92b70"
                  ]
                },
                "inputs": [
                  "0x0000000000000000000000000000000000000000000000000000000000000009",
                  "0x0000000000000000000000000000000000000000000000000000000000000001"
                ]
              };

            var result = await this.verifier.verifyTx.call(testProof.proof.a, testProof.proof.b, testProof.proof.c, testProof.inputs);
            assert.equal(result, true, "Verification failed with correct proof.");

        }) 

        // Test verification with incorrect proof
        it('verifier should fail with invalid proof', async function () { 

            let invalidProof = {
                "proof": {
                  "a": [
                    "0x10b65099b47791ac9f93cd433fa21ad0325df1019d3530b05f0a7b562c2c29d6",
                    "0x117f3d64bf62ab670e4fa3cc127aac0587bcaf33dc00a63e7c008f30880f3017"
                  ],
                  "b": [
                    [
                      "0x1c5294c90e939fdd43525f2eca7ee0ac9ca8c1417bf2a5c2a80490159232d6ba",
                      "0x0a65d8655a68ad78332cc5b07e5a4e6ea2cbe1aea8aed9099b22dd40a8f49f0b"
                    ],
                    [
                      "0x20e878170a0b49e0c0f6c6912c0a9f989da01d4ae8e64f30fccb0cae2992e281",
                      "0x0d20334797ac198bd58e73a4d65a5cb75483a654b93b431f79a25ea322b0bc3b"
                    ]
                  ],
                  "c": [
                    "0x2990c79cbc3fc4b49bd8df40de2c53c4ed7e31f6d1ffa52dffaffc53f3b7c71f",
                    "0x2e2eacdff8afd6d48d6a39c9772be1bb6501762b872ecebc7d39a4fcbde92b70"
                  ]
                },
                "inputs": [
                  "0x0000000000000000000000000000000000000000000000000000000000000001",
                  "0x0000000000000000000000000000000000000000000000000000000000000009"
                ]
              };

            var result = await this.verifier.verifyTx.call(invalidProof.proof.a, invalidProof.proof.b, invalidProof.proof.c, invalidProof.inputs);
            assert.equal(result, false, "Verification failed with invalid proof.");

        }) 
    });

})